# 整合 service.yml 和 deployment.yml 成一個檔案時，規定的語法必須將多個 resource 用 --- 分隔
# 這個檔案的順序是先宣告 service，再宣告 deployment
# 因為 service 會先於 deployment 建立，並且在擁有對應 labes 的 pods 建立後動態地交由 service 管理
apiVersion: v1
kind: Service
metadata:
  name: d-mode-app-service
spec:
  selector:
    app: d-mode-app
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: d-mode-app
spec:
  replicas: 2  
  selector:
    matchLabels:
      app: d-mode-app
      tier: backend
    # 原本使用的 matchLabels 事實上可以用 matchExpressions 來取代，這邊就類似邏輯運算，將多項複雜條件組合起來
    # 這邊要注意 selector 是 k8s 的其中一種 immutable field (不可變更欄位)，一旦建立後就無法更改
    # 如果要更改 selector 的話，必須刪除現有的 deployment，再重新建立
    # matchExpressions:
    #   - { key: app, operator: In, values: [d-mode-app] } # operator 可用 In, NotIn, Exists, DoesNotExist, Gt, Lt
    #   - { key: tier, operator: In, values: [backend] }
  template:
    metadata:
      labels:
        app: d-mode-app
        tier: backend    
    spec:
      containers:
        - name: d-mode-app
          image: indianapacer15/udemy-docker-n-kubernetes-course:course-189-k8s-imperative
          imagePullPolicy: Always # Policy 如果用 Always，即使 image tag 沒變，k8s 也會每次都去拉最新的 image
          # 可以使用的 imagePullPolicy 有三種
          # Always: 每次都拉最新的 image，如果 tag 用的是 latest，就不需要使用這個 policy
          # IfNotPresent: 如果本地有就不拉，沒有就拉最新的 image
          # Never: 永遠不拉，使用本地的 image

          # 下方的宣告標籤，如字面意思，戳戳看是不是活著
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 10
        # multiple containers in one pod
        # - name: ...
        #   image: ...